---
description: "Reglas de desarrollo para Portfolio Personal - Astro + Tailwind CSS"
globs:
  - "**/*.astro"
  - "**/*.js" 
  - "**/*.ts"
  - "**/*.jsx"
  - "**/*.tsx"
  - "**/*.css"
  - "**/*.md"
  - "**/*.json"
alwaysApply: true
---

# PROJECT RULES - Portfolio Personal

## üìã Prop√≥sito del Proyecto

Este proyecto tiene como objetivo construir un **portafolio profesional** utilizando tecnolog√≠as modernas, priorizando:
- ‚ö° **Rendimiento √≥ptimo**
- ‚ôø **Accesibilidad web**
- üé® **Experiencia de usuario excepcional**
- üì± **Dise√±o responsivo**

---

## üõ†Ô∏è Stack Tecnol√≥gico

### Tecnolog√≠as Principales
- **Framework:** [Astro](https://astro.build/) - Framework est√°tico moderno
- **Lenguaje:** JavaScript ES6+ 
- **Estilos:** [Tailwind CSS](https://tailwindcss.com/) - Framework CSS utility-first
- **Control de versiones:** Git

### Librer√≠as Adicionales
- Solo se permiten librer√≠as ligeras y espec√≠ficamente aprobadas
- Cada nueva dependencia debe ser justificada y documentada
- Priorizar soluciones nativas antes que librer√≠as externas

---

## üìÅ Estructura de Carpetas

```
src/
‚îú‚îÄ‚îÄ components/          # Componentes reutilizables (.astro, .js)
‚îú‚îÄ‚îÄ pages/              # P√°ginas del sitio (.astro)
‚îú‚îÄ‚îÄ layouts/            # Layouts base (.astro)
‚îú‚îÄ‚îÄ styles/             # Estilos globales (.css)
‚îú‚îÄ‚îÄ assets/             # Recursos est√°ticos (im√°genes, iconos, fonts)
‚îú‚îÄ‚îÄ utils/              # Funciones utilitarias (.js)
‚îú‚îÄ‚îÄ data/               # Datos est√°ticos (.json, .js)
‚îî‚îÄ‚îÄ types/              # Definiciones de tipos (si es necesario)

public/                 # Archivos p√∫blicos accesibles directamente
‚îú‚îÄ‚îÄ favicon.ico
‚îú‚îÄ‚îÄ robots.txt
‚îî‚îÄ‚îÄ sitemap.xml
```

### Reglas de Organizaci√≥n
- Mantener cada carpeta con un prop√≥sito espec√≠fico y claro
- No mezclar tipos de archivos en carpetas incorrectas
- Crear subcarpetas cuando sea necesario para mejor organizaci√≥n

---

## üíª Estilo de C√≥digo

### Convenciones de JavaScript
```javascript
// ‚úÖ Correcto - ES6+ moderno
const getUserData = async (userId) => {
  try {
    const response = await fetch(`/api/users/${userId}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching user data:', error);
    return null;
  }
};

// ‚úÖ Destructuring y arrow functions
const { name, email, avatar } = user;
const filteredProjects = projects.filter(project => project.featured);
```

### Formato y Legibilidad
- **Indentaci√≥n:** 2 espacios (no tabs)
- **Punto y coma:** Siempre al final de statements
- **Comillas:** Usar comillas simples `'` para strings
- **Longitud de l√≠nea:** M√°ximo 80-100 caracteres

### Comentarios
```javascript
/**
 * Calcula el tiempo de lectura estimado de un art√≠culo
 * @param {string} content - Contenido del art√≠culo
 * @param {number} wordsPerMinute - Palabras por minuto (default: 200)
 * @returns {number} Tiempo en minutos
 */
const calculateReadingTime = (content, wordsPerMinute = 200) => {
  // Implementaci√≥n...
};
```

---

## üìù Convenciones de Nombres

### Archivos y Carpetas
- **Componentes Astro:** `PascalCase.astro`
  - Ejemplo: `Header.astro`, `ProjectCard.astro`
- **Archivos JavaScript:** `camelCase.js`
  - Ejemplo: `utils.js`, `apiHelpers.js`
- **Carpetas:** `kebab-case`
  - Ejemplo: `project-cards/`, `user-profile/`
- **Im√°genes:** `kebab-case.ext`
  - Ejemplo: `hero-image.webp`, `project-thumbnail.jpg`

### Variables y Funciones
```javascript
// ‚úÖ Variables - camelCase
const userName = 'John Doe';
const isProjectFeatured = true;
const userProfileData = {};

// ‚úÖ Funciones - camelCase con verbos descriptivos
const fetchProjectData = () => {};
const handleFormSubmit = () => {};
const validateEmailFormat = () => {};

// ‚úÖ Constantes - SCREAMING_SNAKE_CASE
const API_BASE_URL = 'https://api.example.com';
const MAX_PROJECTS_PER_PAGE = 6;
```

---

## üéØ Buenas Pr√°cticas

### Desarrollo
- **Componentes reutilizables:** Crear componentes modulares y reutilizables
- **DRY Principle:** Evitar duplicaci√≥n de c√≥digo
- **Separaci√≥n de responsabilidades:** Cada funci√≥n/componente debe tener un prop√≥sito claro
- **Manejo de errores:** Implementar try-catch y validaciones apropiadas

### Performance
- **Optimizaci√≥n de im√°genes:** Usar formatos modernos (WebP, AVIF)
- **Lazy loading:** Implementar carga diferida para im√°genes
- **Minificaci√≥n:** Aprovechar las optimizaciones autom√°ticas de Astro
- **Bundle size:** Monitorear el tama√±o de los archivos generados

### Accesibilidad
```html
<!-- ‚úÖ Ejemplos de buenas pr√°cticas -->
<img src="project.jpg" alt="Captura de pantalla del proyecto ecommerce" />
<button aria-label="Abrir men√∫ de navegaci√≥n">‚ò∞</button>
<main role="main">
  <h1>T√≠tulo principal de la p√°gina</h1>
</main>
```

### SEO
- Usar etiquetas meta apropiadas
- Implementar datos estructurados cuando sea relevante
- Optimizar t√≠tulos y descripciones
- Generar sitemap autom√°ticamente

---

## üß™ Testing y Quality Assurance

### Pruebas Visuales
- **Dispositivos:** Desktop (1920px+), Tablet (768px-1024px), Mobile (320px-768px)
- **Navegadores:** Chrome, Firefox, Safari, Edge
- **Modo oscuro/claro:** Si aplica
- **Estados de interacci√≥n:** Hover, focus, active

### Checklist antes de Commit
- [ ] El c√≥digo funciona correctamente
- [ ] No hay errores en la consola
- [ ] Los estilos se ven correctos en diferentes tama√±os
- [ ] Las im√°genes tienen atributos `alt` descriptivos
- [ ] No hay enlaces rotos
- [ ] El rendimiento no se ha degradado

---

## üîÑ Flujo de Trabajo

### Git Workflow
```bash
# Crear feature branch
git checkout -b feature/nueva-funcionalidad

# Commits descriptivos
git commit -m "feat: agregar componente de galer√≠a de proyectos"
git commit -m "fix: corregir responsive en mobile para header"
git commit -m "style: actualizar colores del tema principal"
```

### Tipos de Commits
- `feat:` Nueva funcionalidad
- `fix:` Correcci√≥n de bugs
- `style:` Cambios de estilos/CSS
- `refactor:` Refactoring de c√≥digo
- `docs:` Actualizaciones de documentaci√≥n
- `perf:` Mejoras de rendimiento

---

## üö´ Restricciones y Limitaciones

### No Permitido
- ‚ùå Usar frameworks CSS adicionales (Bootstrap, etc.)
- ‚ùå Incluir dependencias pesadas innecesariamente
- ‚ùå C√≥digo JavaScript obsoleto (var, function declarations en lugar de arrow functions)
- ‚ùå Estilos inline extensos
- ‚ùå Commits sin mensaje descriptivo

### Requiere Aprobaci√≥n
- ‚ö†Ô∏è Nuevas dependencias de npm
- ‚ö†Ô∏è Cambios en la estructura de carpetas
- ‚ö†Ô∏è Modificaciones en configuraciones de build
- ‚ö†Ô∏è Cambios que afecten el rendimiento significativamente

---

## üìö Recursos y Referencias

### Documentaci√≥n Oficial
- [Astro Documentation](https://docs.astro.build/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [MDN Web Docs](https://developer.mozilla.org/)

### Herramientas Recomendadas
- **Editor:** Cursor con extensiones de Astro y Tailwind
- **Testing:** Lighthouse para performance y accesibilidad
- **Formateo:** Prettier con configuraci√≥n del proyecto

---

## üîÑ Mantenimiento de estas Reglas

- Este documento debe mantenerse actualizado con nuevas decisiones
- Cualquier cambio significativo debe ser discutido con el equipo
- Revisar y actualizar estas reglas peri√≥dicamente
- Documentar excepciones y sus justificaciones

---

## üìû Dudas y Consultas

Ante cualquier duda sobre estas reglas o decisiones de implementaci√≥n:
1. Consultar la documentaci√≥n oficial de las tecnolog√≠as
2. Revisar ejemplos similares en el c√≥digo existente
3. Discutir con el equipo antes de implementar cambios significativos
4. Documentar las decisiones tomadas para futuras referencias

---

- **Despliegue:** [Vercel](https://vercel.com/) - Plataforma de hosting y CI/CD optimizada para proyectos frontend y JAMstack, con integraci√≥n autom√°tica desde GitHub, previsualizaciones de ramas y soporte para dominios personalizados.

**Versi√≥n:** 1.0  
**√öltima actualizaci√≥n:** [Fecha actual]  
**Siguiente revisi√≥n:** [Fecha programada]
